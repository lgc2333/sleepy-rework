/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 测试存活 */
    get: operations['__api_v1_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/config/frontend': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 获取前端配置
     * @description 获取配置文件中 frontend 项下定义的数据
     */
    get: operations['__api_v1_config_frontend_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 获取当前状态信息
     * @description ### 实时获取
     *
     *     使用 WebSocket 连接到该路径可以获取实时推送的状态
     */
    get: operations['__api_v1_info_get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/device/{device_key}/config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取设备配置 */
    get: operations['__api_v1_device__device_key__config_get']
    /** 临时修改设备配置 */
    put: operations['__api_v1_device__device_key__config_put']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/device/{device_key}/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 替换当前设备状态
     * @description ### ⚠️ 注意！数据更新机制
     *
     *     以 PUT 方法请求本接口时，将会将 服务端当前设备配置 与 当前请求体 进行字典合并，之后完全替换当前设备信息
     *
     *     如后端当前配置为：
     *
     *     ```json
     *     {
     *         "name": "Sample Device",
     *         "description": "Device Description balabalabala",
     *     }
     *     ```
     *
     *     当前存储数据为：
     *
     *     ```json
     *     {
     *         "name": "Sample Device",
     *         "description": "Device Description balabalabala",
     *         "data": {
     *             "additional_statuses": [ "喵呜喵呜呜~" ]
     *         }
     *     }
     *     ```
     *
     *     如果你提交下面数据：
     *
     *     ```json
     *     {
     *         "description": "New description",
     *         "data": {}
     *     }
     *     ```
     *
     *     那么当前存储数据将更新为：
     *
     *     ```json
     *     {
     *         "name": "Sample Device",
     *         "description": "New description",
     *         "data": {}
     *     }
     *     ```
     *
     *     ### 其他信息
     *
     *     请参考 PATCH 方法的文档
     */
    put: operations['__api_v1_device__device_key__info_put']
    post?: never
    /** 删除当前设备状态 */
    delete: operations['__api_v1_device__device_key__info_delete']
    options?: never
    head?: never
    /**
     * 更新当前设备状态
     * @description ### ⚠️ 注意！数据更新机制
     *
     *     以 PATCH 方法调用此接口仅会更新你提交的部分数据，且为字典深度更新，也就是
     *
     *     如果后端当前已存储以下数据：
     *
     *     ```json
     *     {
     *         "name": "Sample Device",
     *         "description": "Device Description balabalabala",
     *         "data": {
     *             "current_app": {
     *                 "name": "VSCode",
     *                 "last_change_time": 1748524991530
     *             },
     *             "additional_statuses": [ "正在播放：結束バンド - Re:Re:", "喵呜喵呜~" ]
     *         }
     *     }
     *     ```
     *
     *     你提交了以下数据：
     *
     *     ```json
     *     {
     *         "description": "New description",
     *         "data": {
     *             "current_app": { "name": "IntelliJ IDEA" },
     *             "additional_statuses": [ "喵呜喵呜呜~" ]
     *         }
     *     }
     *     ```
     *
     *     那么当前存储的数据将更新为：
     *
     *     ```json
     *     {
     *         "name": "Sample Device",
     *         "description": "New description",
     *         "data": {
     *             "current_app": {
     *                 "name": "IntelliJ IDEA",
     *                 "last_change_time": 1748524991530
     *             },
     *             "additional_statuses": [ "喵呜喵呜呜~" ]
     *         }
     *     }
     *     ```
     *
     *     ### 实时推送
     *
     *     使用 WebSocket 连接到本路径可以实时推送设备状态，在推送一条状态以后会返回当前状态
     *
     *     连接后推送一条状态设备才会被设置为在线，且保持连接时将一直考虑为设备在线
     *
     *     当断开连接时，设备将被立即设为离线
     *
     *     针对 WS 连接消息体中新增了一个 `replace` 字段，如设置为 `true` 则与 PUT 请求一样是替换设备状态
     *
     *     ### 新设备连接
     *
     *     当一个未在配置文件中定义 device_key 的设备连接时，其配置将设置为首次请求发送的数据
     *
     *     ### 在线状态超时机制
     *
     *     当某设备选择采用轮询请求该接口更新状态时，如果设备没有在后端配置文件定义的时间间隔内再次请求该接口，该设备将自动变为离线状态
     *
     *     ### 仅保持唯一数据接收方式
     *
     *     当某设备已通过 WebSocket 连接到后端，依然 HTTP 请求本接口，或新建一个 WebSocket 连接时，旧连接将自动断开
     */
    patch: operations['__api_v1_device__device_key__info_patch']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** DeviceBatteryStatus */
    DeviceBatteryStatus: {
      /** Percent */
      percent?: number | null
      /** Time Left */
      time_left?: number | null
      /**
       * Charging
       * @default false
       */
      charging: boolean
    }
    /** DeviceConfig */
    DeviceConfig: {
      /**
       * Name
       * @default Unnamed Device
       */
      name: string
      /** Description */
      description?: string | null
      /** Device Type */
      device_type?: components['schemas']['DeviceType'] | string | null
      /** Device Os */
      device_os?: string | null
      /**
       * Remove When Offline
       * @default false
       */
      remove_when_offline: boolean
    }
    /** DeviceCurrentApp */
    DeviceCurrentApp: {
      /** Name */
      name?: string | null
      /** Last Change Time */
      last_change_time?: number | null
    }
    /** DeviceData */
    DeviceData: {
      current_app?: components['schemas']['DeviceCurrentApp'] | null
      battery?: components['schemas']['DeviceBatteryStatus'] | null
      /** Additional Statuses */
      additional_statuses?: string[] | null
    } & {
      [key: string]: unknown
    }
    /** DeviceInfo */
    DeviceInfo: {
      /**
       * Name
       * @default Unnamed Device
       */
      name: string
      /** Description */
      description?: string | null
      /** Device Type */
      device_type?: components['schemas']['DeviceType'] | string | null
      /** Device Os */
      device_os?: string | null
      /**
       * Remove When Offline
       * @default false
       */
      remove_when_offline: boolean
      /**
       * Idle
       * @default false
       */
      idle: boolean
      data?: components['schemas']['DeviceData'] | null
      /**
       * Online
       * @default false
       */
      online: boolean
      /** Last Update Time */
      last_update_time?: number | null
      /**
       * Long Connection
       * @default false
       */
      long_connection: boolean
      readonly status: components['schemas']['OnlineStatus']
    }
    /** DeviceInfoFromClient */
    DeviceInfoFromClient: {
      /**
       * Name
       * @default Unnamed Device
       */
      name: string
      /** Description */
      description?: string | null
      /** Device Type */
      device_type?: components['schemas']['DeviceType'] | string | null
      /** Device Os */
      device_os?: string | null
      /**
       * Remove When Offline
       * @default false
       */
      remove_when_offline: boolean
      /**
       * Idle
       * @default false
       */
      idle: boolean
      data?: components['schemas']['DeviceData'] | null
    }
    /**
     * DeviceType
     * @enum {string}
     */
    DeviceType: 'pc' | 'laptop' | 'phone' | 'tablet' | 'smartwatch' | ''
    /** ErrDetail */
    ErrDetail: {
      /** Type */
      type?: string | null
      /** Msg */
      msg?: string | null
      /** Data */
      data?: unknown
    }
    /** FrontendConfig */
    FrontendConfig: {
      /**
       * Username
       * @default LgCookie
       */
      username: string
      /**
       * Statuses
       * @default {}
       */
      statuses: {
        [key: string]: components['schemas']['FrontendStatusConfig']
      }
    } & {
      [key: string]: unknown
    }
    /** FrontendStatusConfig */
    FrontendStatusConfig: {
      /** Name */
      name: string
      /** Description */
      description: string
      /** Color */
      color: string
    }
    /** Info */
    Info: {
      status: components['schemas']['OnlineStatus']
      /** Devices */
      devices?: {
        [key: string]: components['schemas']['DeviceInfo']
      } | null
    }
    /**
     * OnlineStatus
     * @enum {string}
     */
    OnlineStatus: 'online' | 'offline' | 'idle' | 'unknown'
    /** OpSuccess */
    OpSuccess: {
      /**
       * Success
       * @default true
       * @constant
       */
      success: true
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  __api_v1_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  __api_v1_config_frontend_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FrontendConfig']
        }
      }
    }
  }
  __api_v1_info_get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Info']
        }
      }
    }
  }
  __api_v1_device__device_key__config_get: {
    parameters: {
      query?: {
        exclude_unset?: boolean
      }
      header?: never
      path: {
        device_key: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeviceConfig']
        }
      }
      /** @description 鉴权失败 */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 未找到设备 */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 请求体解析失败 */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
    }
  }
  __api_v1_device__device_key__config_put: {
    parameters: {
      query?: never
      header?: never
      path: {
        device_key: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeviceConfig']
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OpSuccess']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OpSuccess']
        }
      }
      /** @description 鉴权失败 */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 未找到设备，且服务端不允许添加新设备 */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 请求体解析失败 */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
    }
  }
  __api_v1_device__device_key__info_put: {
    parameters: {
      query?: never
      header?: never
      path: {
        device_key: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeviceInfoFromClient'] | null
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeviceInfo']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeviceInfo']
        }
      }
      /** @description 新设备缺少设备初始配置 */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 鉴权失败 */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 未找到设备，且服务端不允许添加新设备 */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 请求体解析失败 */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
    }
  }
  __api_v1_device__device_key__info_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        device_key: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OpSuccess']
        }
      }
      /** @description 鉴权失败 */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 未找到设备 */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 请求体解析失败 */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
    }
  }
  __api_v1_device__device_key__info_patch: {
    parameters: {
      query?: never
      header?: never
      path: {
        device_key: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['DeviceInfoFromClient'] | null
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeviceInfo']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeviceInfo']
        }
      }
      /** @description 鉴权失败 */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 未在配置中找到设备，且服务端不允许添加新设备 */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
      /** @description 请求体解析失败 */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrDetail']
        }
      }
    }
  }
}
